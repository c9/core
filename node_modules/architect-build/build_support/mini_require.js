(function() {

var MODULE_LOAD_URL = "/load/module";

var global = (function() { return this; })();
if (!global && typeof window != "undefined") global = window; // can happen in strict mode

var commentRegExp = /(\/\*([\s\S]*?)\*\/|([^:]|^)\/\/(.*)$)/mg;
var cjsRequireRegExp = /[^.]\s*require\s*\(\s*["']([^'"\s]+)["']\s*\)/g;

function getInlineDeps(fn) {
    var deps = [];
    if (fn.length) {
        fn.toString().replace(commentRegExp, "")
            .replace(cjsRequireRegExp, function (match, dep) {
                deps.push(dep);
            });
        deps = ["require", "exports", "module"].concat(deps);
    }
    return deps;
}

var define = function(name, deps, callback) {
    // Allow for anonymous modules
    if (typeof name !== "string") {
        callback = deps;
        deps = name;
        name = null;
    }
    // This module may not have dependencies
    if (deps && !Array.isArray(deps)) {
        callback = deps;
        deps = null;
    }
    
    if (!name)
        return defQueue.push([deps, callback]);
    
    if (define.loaded[name])
        return;
    
    if (!deps && typeof callback == "function")
        deps = getInlineDeps(callback);
    
    define.loaded[name] = {
        id: name,
        deps: normalizeNames(name, deps),
        factory: callback,
        exports: {},
        packaged: true
    };
};
var defQueue = [];
var addToLoadQueue = function(missing, deps, callback) {
    define.queue.push(function() { _require('', deps, callback); });
    for (var i = 0; i < missing.length; ++i)
        require.load(missing[i]);
};

var processLoadQueue = function(err, id) {
    if (defQueue.length) {
        if (err)
            throw err;
        if (defQueue.length > 1)
            throw new Error("more than one module in defqueue");
        define(id, defQueue[0][0], defQueue[0][1]);
        defQueue.length = 0;    
    }
    var queue = define.queue;
    define.queue = [];
    queue.forEach(function(f) { f(); });
};

define.amd = true;
define.queue = [];
define.loaded = {};
define.modules = { require: 1, exports: 1, module: 1 };
define.fetchedUrls = {};

var activateModule = function(name) {
    var module = define.loaded[name];
    var exports = module.exports;
    if (typeof module.factory !== "function") {
        exports = module.factory;
    } else {
        var req = function(path, callback) {
            return _require(name, path, callback);
        };
        req.toUrl = require.toUrl;
        
        var modules = define.modules;
        var missing = checkMissing(module.deps);
        if (missing.length)
            return missing;
        
        modules.require = req;
        modules.exports = exports;
        modules.module = module;
        
        define.modules[name] = exports;
        var args = module.deps.slice(0, module.factory.length);
        var returnValue = args.length
            ? module.factory.apply(module, args.map(lookup))
            : module.factory(req, exports, module);
        
        exports = returnValue || module.exports;
    }
    delete define.loaded[name];
    define.modules[name] = exports;
};

var checkMissing = function(deps, seen, missing) {
    missing = missing || {};
    seen = seen || {};
    for (var i = 0; i < deps.length; ++i) {
        var depName = deps[i];
        if (!define.modules[depName]) {
            var dep = define.loaded[depName];
            if (!dep)
                missing[depName] = 1;
            else if (!missing[depName] && !seen[depName]) {
                seen[depName] = 1;
                checkMissing(dep.deps, seen, missing);
            }
        }
    }
    return Object.keys(missing);
};

var lookup = function(moduleName) {
    var mod = define.modules[moduleName];
    if (mod === undefined && define.loaded[moduleName]) {
        activateModule(moduleName);
        mod = define.modules[moduleName];
    }
    return mod;
};

var _require = function(parentId, moduleName, callback) {
    if (typeof moduleName === "string") {
        var depName = normalizeName(parentId, moduleName);
        var module = lookup(depName);
        if (module !== undefined) {
            callback && callback(module);
            return module;
        }
    } else if (Array.isArray(moduleName)) {
        var deps = normalizeNames(parentId, moduleName);
        var missing = checkMissing(deps);
        if (!missing.length) {
            var args = deps.map(lookup);
            return callback && callback.apply(null, args);
        } else {
            return addToLoadQueue(missing, deps, callback);
        }
    }
    if (_require.original)
        return _require.original.apply(this, arguments);
};

var normalizeName = function(parentId, moduleName) {
    // normalize plugin requires
    if (moduleName.indexOf("!") !== -1) {
        var chunks = moduleName.split("!");
        return normalizeName(parentId, chunks[0]) + "!" + normalizeName(parentId, chunks[1]);
    }
    // normalize relative requires
    if (moduleName.charAt(0) == ".") {
        var base = parentId.split("/").slice(0, -1).join("/");
        moduleName = (base || parentId) + "/" + moduleName;

        while (moduleName.indexOf(".") !== -1 && previous != moduleName) {
            var previous = moduleName;
            moduleName = moduleName.replace(/\/\.\//, "/").replace(/[^\/]+\/\.\.\//, "");
        }
    }

    return moduleName;
};

var normalizeNames = function(parentId, moduleNames) {
    return moduleNames.map(function(name) {
        return normalizeName(parentId, name);
    });
};

var require = function(module, callback) {
    return _require("", module, callback);
};

require.undef = function(module, callback) {
    module = normalizeName("", module);
    var path = require.toUrl(module);
    delete define.loaded[module];
    delete define.modules[module];
    delete define.fetchedUrls[path];
};

require.MODULE_LOAD_URL = MODULE_LOAD_URL;

require.toUrl = function(module, ext) {
    var path = module;
    if (!/https?:\/\//.test(path))
        path = require.MODULE_LOAD_URL + "/" + path + (ext || "");
    return path;
};

var loadScript = function(path, id, callback) {
    var head = document.head || document.documentElement;
    var s = document.createElement("script");
    s.src = path;
    s.charset = 'utf-8';
    s.async = true;
    
    if (path.lastIndexOf(require.MODULE_LOAD_URL, 0) == 0)
        s.crossOrigin = true;
    
    head.appendChild(s);

    s.onload = s.onreadystatechange = function(_, isAbort) {
        if (isAbort || !s.readyState || s.readyState == "loaded" || s.readyState == "complete") {
            s = s.onload = s.onreadystatechange = null;
            if (!isAbort)
                callback(null, id);
        }
    };
};

require.load = function(module) {
    var i = module.indexOf("!") + 1;
    if (i) {
        var plugin = module.substring(0, i);
        module = module.substr(i);
        if (require[plugin]) {
            require[plugin](module, processLoadQueue);
        } else {
            console.error("require plugin " + plugin + "missing");
        }
    } else {
        var url = require.toUrl(module, ".js");
        if (define.fetchedUrls[url] & 1)
            return false;
        define.fetchedUrls[url] |= 1;
        loadScript(url, module, processLoadQueue);
    }
};

/*** plugins ***/
require["text!"] = function(module, callback) {
    var url = require.toUrl(module);
    if (define.fetchedUrls[url] & 2)
        return false;
    define.fetchedUrls[url] |= 2;
    var cb = function(e, val) {
        if (e) console.error("Couldn't load module " + module, e);
        define("text!" + module, [], val);
        callback();
    };
    var xhr = new window.XMLHttpRequest();
    xhr.open("GET", url + "?access_token=fake_token", true);
    xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8");
    xhr.onload = function(e) { cb(null, xhr.responseText); };
    xhr.onabort = xhr.onerror = function(e) { cb(e); };
    xhr.send("");
};

/*** add global define ***/
if (!global.define || !global.define.packaged) {
    define.original = global.define;
    global.define = define;
    global.define.packaged = true;
}

if (!global.require || !global.require.packaged) {
    global.require = require;
    global.require.packaged = true;
}
global.miniRequire = require;


})();
